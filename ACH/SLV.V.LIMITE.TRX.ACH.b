*-----------------------------------------------------------------------------
* <Rating>-29</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE SLV.V.LIMITE.TRX.ACH
*-----------------------------------------------------------------------------
*
*-----------------------------------------------------------------------------
* Modification History :
*-----------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.EB.SLV.TRANSACTION.ACH
    $INSERT I_F.EB.SLV.ACUMULADOR.ACH
    $INSERT I_F.FUNDS.TRANSFER
    $INSERT I_F.EB.SLV.KEYS.PARAMS
    $INSERT I_F.ACCOUNT
    $INSERT I_F.EB.SLV.GLOBAL.PARAM
*-----------------------------------------------------------------------------

    GOSUB INIT
    GOSUB OPEN.FILE
    GOSUB VAR.GLOBAL.PGM
    GOSUB PROCESS
    RETURN

INIT:
    FN.ACCOUNT  = 'F.ACCOUNT'
    F.ACCOUNT   = ''
    FN.TRX.ACH  = 'F.EB.SLV.TRANSACTION.ACH'
    F.TRX.ACH   = ''
    FN.ACUM.ACH = 'F.EB.SLV.ACUMULADOR.ACH'
    F.ACUM.ACH  = ''
    FN.KY.PRM   = 'F.EB.SLV.KEYS.PARAMS'
    F.KY.PRM    = ''
    FN.GLB.PRM  = 'F.EB.SLV.GLOBAL.PARAM'
    F.GLB.PRM   = ''
    RETURN

OPEN.FILE:
    CALL OPF(FN.ACCOUNT,F.ACCOUNT)
    CALL OPF(FN.TRX.ACH,F.TRX.ACH)
    CALL OPF(FN.ACUM.ACH,F.ACUM.ACH)
    CALL OPF(FN.KY.PRM,F.KY.PRM)
    CALL OPF(FN.GLB.PRM,F.GLB.PRM)
    RETURN

VAR.GLOBAL.PGM:
    EQU ID.LIMITES.ACH  TO 'SLV.LIMITES.ACH'
    EQU SYSTEM.DATE     TO TODAY
;*EQU ESTADOS.VALIDOS TO '5'
    CUENTA.DEBITO.TRX   =  R.NEW(FT.DEBIT.ACCT.NO)
;*CUENTA.DEBITO.TRX   =  '10000000013852'
    EQU LIMITE.DIARIO   TO 'LIMITE.DIARIO'
    EQU LIMITE.MENSUAL  TO 'LIMITE.MENSUAL'
    EQU LIMITE.ST.ACH   TO 'SLV.LIMITE.ESTADOS.ACH'
    MONTO.FT.ACTUAL     =  R.NEW(FT.DEBIT.AMOUNT)
;*MONTO.FT.ACTUAL     = '200.85'
;*OBTENEMOS EL TIPO DE BANCA EN LINEA EN DONDE SE REALIZO LA TRANSACCION
    CALL GET.LOC.REF ('FUNDS.TRANSFER','LF.TCE.NARR',POS.NARR)
    TIPO.BANCA          =  R.NEW(FT.LOCAL.REF)<1,POS.NARR>
;*TIPO.BANCA    = 'CCEM'
    TEXTO.ARCHIVO = 'SYSTEM.DATE > ':SYSTEM.DATE:' | MONTO.FT.ACTUAL > ':MONTO.FT.ACTUAL:' | CUENTA.DEBITO.TRX > ':CUENTA.DEBITO.TRX:' | TIPO.BANCA > ':TIPO.BANCA
    GOSUB ESCRIBIR.ARCHIVO
    RETURN

PROCESS:
;*OBTENEMOS LOS LIMITES PARAMETRIZADOS EN LA APLICACION EB.SLV.KEYS.PARAMS
    CALL F.READ(FN.KY.PRM,ID.LIMITES.ACH,KY.PRM.R,F.KY.PRM,ERR.KY.PRM)
;*OBTENEMOS EL DETALLE DE LA CUENTA DEBITO DE LA APLICACION FUNDS.TRANSFER
    CALL F.READ(FN.ACCOUNT,CUENTA.DEBITO.TRX,CTA.DEBIT.R,F.ACCOUNT,ERR.ACC)
;*OBTENEMOS EL CLIENTE DE LA CUENTA DEBITO DE LA APLICACION FUNDS.TRANSFER
    CLIENTE = CTA.DEBIT.R<AC.CUSTOMER>
    TEXTO.ARCHIVO = 'CLIENTE > ':CLIENTE
    GOSUB ESCRIBIR.ARCHIVO
;*OBTENEMOS EL DETALLE DE LAS TRANSACCIONES ACUMULADAS POR EL CLIENTE DE LA CUENTA DEBITO EN LA APLICACION FUNDS.TRANSFER
    CALL F.READ(FN.ACUM.ACH,CLIENTE,ACUM.R,F.ACUM.ACH,ACUM.ERRS)

    GOSUB LIMITES.TRX.ACH
    GOSUB TRANSACCIONES.ACH.MES
    GOSUB DETALLE.TRANSACCIONES.ACH
    GOSUB CALCULAR.MONTO.DIARIO
    GOSUB CALCULAR.MONTO.MENSUAL
;*VALIDAMOS EL MONTO DIARIO
    TEXTO.ARCHIVO = 'MONTO.TOTAL.DIARIO > ':MONTO.TOTAL.DIARIO:' | MONTO.TOTAL.MENSUAL > ':MONTO.TOTAL.MENSUAL
    GOSUB ESCRIBIR.ARCHIVO
    BEGIN CASE
        CASE MONTO.TOTAL.DIARIO  > MONTO.LIMITE.DIARIO
            AF    = FT.DEBIT.ACCT.NO
            AV    = FT.DEBIT.ACCT.NO
            LLAVE.BUSQUEDA = 'LIMITE.DIARIO.EXCEDIDO'
            ETEXT = LLAVE.BUSQUEDA
            CALL STORE.END.ERROR
        CASE MONTO.TOTAL.MENSUAL > MONTO.LIMITE.MENSUAL
            AF    = FT.DEBIT.ACCT.NO
            AV    = FT.DEBIT.ACCT.NO
            LLAVE.BUSQUEDA = 'LIMITE.MENSUAL.EXCEDIDO'
            ETEXT = LLAVE.BUSQUEDA
            CALL STORE.END.ERROR
    END CASE ;*EN CASE

    RETURN

CALCULAR.MONTO.DIARIO:
    MONTO.DIARIO.TRX = 0
    LOOP
        REMOVE TRX.DIARIAS FROM ARR.TRX.DIARIAS SETTING POS.TRX.DIARIAS
    WHILE TRX.DIARIAS NE ''
        MONTO.TRX = FIELDS(TRX.DIARIAS,'~',2)
        MONTO.DIARIO.TRX += MONTO.TRX
    REPEAT
    MONTO.TOTAL.DIARIO = MONTO.DIARIO.TRX + MONTO.FT.ACTUAL
    RETURN ;*END SUBPROCESS CALCULAR.MONTO.DIARIO

CALCULAR.MONTO.MENSUAL:
    MONTO.MENSUAL.TRX = 0
    LOOP
        REMOVE TRX.MENSUAL FROM ARR.TRX.MENSUALES SETTING POS.TRX.MENSUAL
    WHILE TRX.MENSUAL NE ''
        MONTO.TRX.M = FIELDS(TRX.MENSUAL,'~',2)
        MONTO.MENSUAL.TRX += MONTO.TRX.M
    REPEAT
    MONTO.TOTAL.MENSUAL = MONTO.MENSUAL.TRX + MONTO.FT.ACTUAL
    RETURN ;*END SUBPROCESS CALCULAR.MONTO.MENSUAL

DETALLE.TRANSACCIONES.ACH:
    CONTADOR.DT       = 1
    ARR.TRX.DIARIAS   = ''
    ARR.TRX.MENSUALES = ''

;*OBTENEMOS EL LIMITE DEL ESTADO VALIDO
    CALL F.READ(FN.GLB.PRM,LIMITE.ST.ACH,ESTADO.R,F.GLB.PRM,GLB.ERR)
    LIMITE.ESTADO.VALIDO = ESTADO.R<EB.SLV39.VALOR.PARAM>
    CRT 'LIMITE.ESTADO.VALIDO > ':LIMITE.ESTADO.VALIDO

    LOOP
        REMOVE ID.FT FROM LIST.FT SETTING POS.FT
    WHILE ID.FT NE ''
        ;*OBTENEMOS EL DETALLE DE LA TRANSACCION FUNDS.TRANSFER EN LA APLICACION EB.SLV.TRANSACTION.ACH
        CALL F.READ(FN.TRX.ACH,ID.FT,TRX.ACH.R,F.TRX.ACH,TRX.ACH.ERR)
        ESTADO.TRX.ACH = TRX.ACH.R<EB.SLV98.STATUS>
        MONTO          = TRX.ACH.R<EB.SLV98.CARGO.TOTAL>
        FECHA          = TRX.ACH.R<EB.SLV98.CREARING.DATE>


        IF ESTADO.TRX.ACH < LIMITE.ESTADO.VALIDO THEN
            TRAMA = ID.FT:'~':MONTO:'~':FECHA
            IF FECHA EQ TODAY THEN
                ARR.TRX.DIARIAS<-1>   = TRAMA
            END ;*END IF
            ELSE
            FECHA.INICIAL = SUBSTRINGS(SYSTEM.DATE,1,6):'01'
            FECHA.FINAL   = TODAY

            IF FECHA >= FECHA.INICIAL AND FECHA <= FECHA.FINAL THEN
                ARR.TRX.MENSUALES<-1> = TRAMA
            END ;*END IF FECHA >= FECHA.INICIAL AND FECHA <= FECHA.FINAL THEN

        END ;*END ELSE

        END ;*END IF ESTADO.TRX.ACH < 3

        CONTADOR.DT++
    REPEAT ;*END WHILE ID.FT NE ''
    TEXTO.ARCHIVO = 'ARR.TRX.DIARIAS > ':ARR.TRX.DIARIAS
    GOSUB ESCRIBIR.ARCHIVO
    TEXTO.ARCHIVO = 'ARR.TRX.MENSUALES > ':ARR.TRX.MENSUALES
    GOSUB ESCRIBIR.ARCHIVO
    RETURN ;*END SUBPROCESS DETALLE.TRANSACCIONES.ACH

TRANSACCIONES.ACH.MES:
    DATES.LIST = ACUM.R<EB.SLV96.FECHA.MES>
    CONTADOR   = 1
    LOOP
        REMOVE MONTH FROM DATES.LIST SETTING POS.MONTH
    WHILE MONTH NE ''
        IF MONTH EQ SUBSTRINGS(SYSTEM.DATE,1,6) THEN
            LIST.FT = ACUM.R<EB.SLV96.ID.FT>
        END ;*END IF MONTH EQ SUBSTRINGS(SYSTEM.DATE,1,6) THEN
        CONTADOR++
    REPEAT ;*END WHILE MONTH NE
    TEXTO.ARCHIVO = 'LIST.FT > ':LIST.FT
    GOSUB ESCRIBIR.ARCHIVO
    RETURN ;*END SUBPROCESS TRANSACCIONES.ACH.MES

LIMITES.TRX.ACH:
    LIST.PARAM = KY.PRM.R<EB.SLV18.PARAM.ID>
    CONTADOR   = 1
    LOOP
        REMOVE PARAM FROM LIST.PARAM SETTING POS.PARAM
    WHILE PARAM NE ''
        IF PARAM EQ RIGHT(TIPO.BANCA,2) THEN
            LIST.LIMITES = KY.PRM.R<EB.SLV18.VALOR,CONTADOR>
            LOOP
                REMOVE LIMITE FROM LIST.LIMITES SETTING POS.LIMITE
            WHILE LIMITE NE ''
                DESC.LIMITE  = FIELDS(LIMITE,'~',1)
                MONTO.LIMITE = FIELDS(LIMITE,'~',2)
                BEGIN CASE
                    CASE DESC.LIMITE EQ LIMITE.DIARIO
                        MONTO.LIMITE.DIARIO  = MONTO.LIMITE
                    CASE DESC.LIMITE EQ LIMITE.MENSUAL
                        MONTO.LIMITE.MENSUAL = MONTO.LIMITE
                    CASE 1
                END CASE ;*END CASE
            REPEAT ;*END WHILE LIMITE NE ''
        END ;*END IF PARAM EQ RIGHT(TIPO.BANCA,2) THEN
        CONTADOR++
    REPEAT ;*END WHILE PARAM NE ''

    TEXTO.ARCHIVO = 'MONTO.LIMITE.DIARIO > ':MONTO.LIMITE.DIARIO:' | MONTO.LIMITE.MENSUAL > ':MONTO.LIMITE.MENSUAL
    GOSUB ESCRIBIR.ARCHIVO

    RETURN ;*END SUBPROCESS LIMITES.TRX.ACH

ESCRIBIR.ARCHIVO:
    DIR.NAME= 'FATCA'
    R.ID   = 'SLV.V.LIMITE.TRX.ACH_':TODAY:'.txt'
;* hacer que escriba un archivo

    OPENSEQ DIR.NAME,R.ID TO SEQ.PTR
    WRITESEQ TEXTO.ARCHIVO APPEND TO SEQ.PTR THEN
    END
    CLOSESEQ SEQ.PTR
    RETURN

    END
