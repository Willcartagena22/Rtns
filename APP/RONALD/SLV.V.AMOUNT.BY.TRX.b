*-----------------------------------------------------------------------------
* <Rating>-115</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE SLV.V.AMOUNT.BY.TRX
*-----------------------------------------------------------------------------
*
*-----------------------------------------------------------------------------
* Modification History :
*-----------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.FUNDS.TRANSFER
    $INSERT I_F.ACCOUNT
    $INSERT I_F.EB.SLV.GLOBAL.PARAM
    $INSERT I_F.EB.SLV.CTA.SIMPLIFICADA.TXN
    $INSERT I_F.AA.ACCOUNT
    $INSERT I_F.AA.ARRANGEMENT
*-----------------------------------------------------------------------------

    GOSUB INIT
    GOSUB OPEN.FILE
    GOSUB CAT.SIMP
    GOSUB SET.VARIABLES
    GOSUB PROCESS.DEBIT
    GOSUB PROCESS
    RETURN

INIT:
    ACC.FN  = 'F.ACCOUNT'
    ACC.F   = ''
    PRM.FN  = 'F.EB.SLV.GLOBAL.PARAM'
    PRM.F   = ''
    DTL.FN  = 'F.EB.SLV.CTA.SIMPLIFICADA.TXN'
    DTL.F   = ''
    RETURN

OPEN.FILE:
    CALL OPF(ACC.FN,ACC.F)
    CALL OPF(PRM.FN,PRM.F)
    CALL OPF(DTL.FN,DTL.F)
    RETURN

SET.VARIABLES:
;*OBTENEMOS EL MONTO POR TRANSACCION PARA LA CUENTA SIMPLIFICADA
    TRX.CREDIT.ACC = R.NEW(FT.CREDIT.ACCT.NO)
;*OBTENEMOS LA CUENTA DEBITO DE LA TRANSACCION
    TRX.DEBIT.ACC  = R.NEW(FT.DEBIT.ACCT.NO)
;*PARAMETRO DEFINIDO EN LA APLICACION EB.SLV.GLOBAL.PARAM
    EQU TRX.AMOUNT TO 'CTA.SIMPLIFICADA.MONTO.TRX'
;*MONTO MENSUAL
    EQU TRX.MONTH.AMOUNT TO 'CTA.SIMPLIFICADA.MONTO.MONTH'
;*SALDO PERMITIDO EN LA CUENTA
    EQU SALDO.PERMITIDO.PRM TO 'CTA.SIMPLIFICADA.SALDO.VALIDO'
;*OBTENEMOS EL MONTO DE LA TRANSACCION
    TRX.AMOUNT.FT  = R.NEW(FT.DEBIT.AMOUNT)
    
    TRX.CREDIT.ACC='10000000988764'
    TRX.AMOUNT.FT='1000'
    
    RETURN

PROCESS.DEBIT:
;*OBTENEMOS EL DETALLE DEL PARAMETRO
    CALL F.READ(PRM.FN,TRX.AMOUNT,PRM.R.D,PRM.F,PRM.ERR)
;*OBTENEMOS EL DETALLE DE LA CUENTA DEBITO
    CALL F.READ(ACC.FN,TRX.DEBIT.ACC,ACC.R.D,ACC.F,ACC.ERR)
;*OBTENEMOS LA CATEGORY
    DEBIT.ACC.CATEGORY  = ACC.R.D<AC.CATEGORY>
;*OBTENEMOS EL MONTO PARAMETRIZADO
    PRM.AMOUNT.DEBIT   = PRM.R.D<EB.SLV39.VALOR.PARAM>
    
    IF DEBIT.ACC.CATEGORY EQ CATEGORY.SIMP THEN
      
        IF TRX.AMOUNT.FT > PRM.AMOUNT.DEBIT THEN
            AF = FT.DEBIT.ACCT.NO
            AV = FT.DEBIT.ACCT.NO
            LLAVE.BUSQUEDA = 'EB-TRX.AMOUNT.ACC.SIMPLIFICADA'
            ETEXT = LLAVE.BUSQUEDA
            CALL STORE.END.ERROR
        END ;*END IF TRX.AMOUNT.FT > PRN.AMOUNT.DEBIT
        ELSE
        ;*RECUPERAMOS EL LIMITE MENSUAL
        CALL F.READ(PRM.FN,TRX.MONTH.AMOUNT,PRM.MONTH.D,PRM.F,PRM.ERR.MONTH)
        ;*EVALUAMOS EL MONTO MENSUAL PARAMETRIZADO
        GOSUB GET.MONTH.AMOUNT.DEBIT.CTA
        CURRENT.AMOUNT = TRX.AMOUNT.FT + AMOUNT.MONTH.D
        
        IF CURRENT.AMOUNT > PRM.MONTH.D<EB.SLV39.VALOR.PARAM> THEN
            AF = FT.DEBIT.ACCT.NO
            AV = FT.DEBIT.ACCT.NO
            LLAVE.BUSQUEDA = 'EB-TRX.AMOUNT.MONTH.CTA.SIM'
            ETEXT = LLAVE.BUSQUEDA
            CALL STORE.END.ERROR
        END ;*END IF CURRENT.AMOUNT > PRM.MONTH.D<EB.SLV39.VALOR.PARAM>
        
        END ;*END ELSE
      
    END ;*END IF DEBIT.ACC.CATEGORY
    
RETURN

PROCESS:
;*OBTENEMOS EL DETALLE DEL PARAMETRO
    CALL F.READ(PRM.FN,TRX.AMOUNT,PRM.R,PRM.F,PRM.ERR)
;*OBTENEMOS EL DETALLE DE LA CUENTA
    CALL F.READ(ACC.FN,TRX.CREDIT.ACC,ACC.R,ACC.F,ACC.ERR)
;*OBTENEMOS LA CATEGORY
    ACC.CATEGORY        = ACC.R<AC.CATEGORY>
;*OBTENEMOS EL SALDO ACTUAL DE LA CUENTA
    ACC.WORKING.BALANCE = ACC.R<AC.WORKING.BALANCE>
;*OBTENEMOS EL MONTO PARAMETRIZADO
    PRM.AMOUNT          = PRM.R<EB.SLV39.VALOR.PARAM>

    IF ACC.CATEGORY EQ CATEGORY.SIMP THEN
        ;*EVALUAMOS EL MONTO POR TRANSACCION PARAMETRIZADO.
        IF TRX.AMOUNT.FT > PRM.AMOUNT THEN
            AF = FT.CREDIT.ACCT.NO
            AV = FT.CREDIT.ACCT.NO
            LLAVE.BUSQUEDA = 'EB-TRX.AMOUNT.ACC.SIMPLIFICADA'
            ETEXT = LLAVE.BUSQUEDA
            CALL STORE.END.ERROR
        END ;*END IF TRX.AMOUNT.FT > PRM.AMOUNT
        ELSE
            ;*RECUPERAMOS EL LIMITE MENSUAL
            CALL F.READ(PRM.FN,TRX.MONTH.AMOUNT,PRM.MONTH,PRM.F,PRM.ERR.MONTH)
            ;*EVALUAMOS EL MONTO MENSUAL PARAMETRIZADO
            GOSUB GET.MONTH.AMOUNT.CTA
            CURRENT.AMOUNT = AMOUNT.MONTH + TRX.AMOUNT.FT
        
            IF CURRENT.AMOUNT > PRM.MONTH<EB.SLV39.VALOR.PARAM> THEN
               AF = FT.CREDIT.ACCT.NO
               AV = FT.CREDIT.ACCT.NO
               LLAVE.BUSQUEDA = 'EB-TRX.AMOUNT.MONTH.CTA.SIM'
               ETEXT = LLAVE.BUSQUEDA
               CALL STORE.END.ERROR
            END ;*END IF CURRENT.AMOUNT > PRM.MONTH<EB.SLV39.VALOR.PARAM>
            
            ;*VALIDAMOS EL SALDO QUE TENDRÁ LA CUENTA SI SE REALIZA LA TRANSACCION ACTUAL
            NUEVO.SALDO.CUENTA = ACC.WORKING.BALANCE + TRX.AMOUNT.FT
            ;*OBTENEMOS EL SALDO PERMITIDO PARAMETRIZADO EN LA APLICACION EB.SLV.GLOBAL.PARAM
            CALL F.READ(PRM.FN,SALDO.PERMITIDO.PRM,SALDO.R,PRM.F,SALDO.ERR)
            
            IF NUEVO.SALDO.CUENTA > SALDO.R<EB.SLV39.VALOR.PARAM> THEN
               AF = FT.CREDIT.ACCT.NO
               AV = FT.CREDIT.ACCT.NO
               LLAVE.BUSQUEDA = 'EB-CTA.SIMPLIFICADA.SALDO.INVALIDO'
               ETEXT = LLAVE.BUSQUEDA
               CALL STORE.END.ERROR
            END ;*END IF NUEVO.SALDO.CUENTA > 1200
            
        END ;*END ELSE TRX.AMOUNT.FT > PRM.AMOUNT
    END ;*END IF ACC.CATEGORY EQ '6016'

    RETURN

GET.MONTH.AMOUNT.DEBIT.CTA:
    CALL F.READ(DTL.FN,TRX.DEBIT.ACC,DTL.R.D,DTL.F,DTL.ERR.D)
    IF DTL.ERR.D EQ '' THEN
       YEAR.MONTH.CURRENT       = TODAY[1,4]:TODAY[5,2]
       TRX.ARR                  = DTL.R.D<EB.SLV25.TRX.DETALLE>
       
       FINDSTR YEAR.MONTH.CURRENT IN TRX.ARR SETTING V.FLD, V.VAL THEN
             DETAIL.FOUND       = TRX.ARR<1,V.VAL>
             DATE.DETAIL        = FIELDS(DETAIL.FOUND,'~',1)
             AMOUNT.DETAIL      = FIELDS(DETAIL.FOUND,'~',2)
             
             IF YEAR.MONTH.CURRENT EQ DATE.DETAIL THEN
                 AMOUNT.MONTH.D = AMOUNT.DETAIL
             END ;*END IF YEAR.MONTH.CURRENT
             
       END ;*END FINDSTR
       ELSE
             AMOUNT.MONTH.D = 0
       END
    END ;*END IF DTL.ERR
    ELSE
             AMOUNT.MONTH.D = 0
    END ;*END ELSE DTL.ERR
RETURN

GET.MONTH.AMOUNT.CTA:
    CALL F.READ(DTL.FN,TRX.CREDIT.ACC,DTL.R,DTL.F,DTL.ERR)

    IF DTL.ERR EQ '' THEN
        YEAR.MONTH.CURRENT = TODAY[1,4]:TODAY[5,2]
        TXN.LIST           = DTL.R<EB.SLV25.TRX.DETALLE>
        AMOUNT.MONTH       = 0
        LOOP
            REMOVE TRANSACTION FROM TXN.LIST SETTING TRX.POS
        WHILE TRANSACTION:TRX.POS
            DATE.DETAIL     = FIELDS(TRANSACTION,'~',1)
            AMOUNT.DETAIL   = FIELDS(TRANSACTION,'~',2)
            ;*OBTENEMOS LAS TRANSACCIONES DEL MES ACTUAL
            IF DATE.DETAIL EQ YEAR.MONTH.CURRENT THEN
                AMOUNT.MONTH += AMOUNT.DETAIL
            END

        REPEAT
    END
    ELSE
                AMOUNT.MONTH = 0
    END
    RETURN


CAT.SIMP:
    FN.AA.PRODUCT.DESIGNER = 'F.AA.PRD.DES.ACCOUNT'
    F.AA.PRODUCT.DESIGNER = ''
    CALL OPF(FN.AA.PRODUCT.DESIGNER,F.AA.PRODUCT.DESIGNER)
    Y.PRODUCTO='CUENTA.AHORRO.SIM'
    SELECT.PROD.DES = "SELECT " : FN.AA.PRODUCT.DESIGNER : " WITH @ID LIKE '" : Y.PRODUCTO : "...'"
    CALL EB.READLIST(SELECT.PROD.DES, PROD.DES,'',NO.REC.PROD.DES, ERR.REC.PROD.DES)
    IF NO.REC.PROD.DES NE 0 THEN
        CALL F.READ(FN.AA.PRODUCT.DESIGNER,PROD.DES, PROD.DES.REC, F.AA.PRODUCT.DESIGNER, ERR.REC1)
        IF PROD.DES.REC THEN


            CALL F.READ(FN.AA.PRODUCT.DESIGNER,PROD.DES, PROD.DES.REC, F.AA.PRODUCT.DESIGNER, ERR.REC1)
            IF PROD.DES.REC THEN
                CATEGORY.SIMP = PROD.DES.REC<AA.AC.CATEGORY> ;*Obtener el parent para luego ir a traer sus propiedades
            END

        END

    END
    RETURN



    END
